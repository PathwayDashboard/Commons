package it.eng.pathway.tests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;

import it.eng.pathway.utility.HrFileHandler;
import it.eng.pathway.utility.HrMeasure;

public class HrFileHandlerTest {
	
//	private String read="1;80;2;84;3;76;";
	private String read="80;84;76;";
	private Double media = (double) 80; //media della stringa di sopra
	
	@Test
	public void testParse() {
		List<HrMeasure> hrs=HrFileHandler.parse(read);
		assertEquals("Lunghezza array parsed non corretta",hrs.size(),3);
	}

	@Test
	public void testCreateString() {
		List<HrMeasure> hrs=HrFileHandler.parse(read);
		String created=HrFileHandler.createString(hrs);
		assertEquals("Stringhe Differenti", read, created);
	}

	@Test
	public void testCreateFile() {
		int min = 78;
		int max = 90;
		int duration = 10;
		List<HrMeasure> hrs=HrFileHandler.createFile(min, max, duration);
		assertEquals("Lunghezza array creato non corretta",hrs.size(),duration*60);
		int minC = 200;
		int maxC = 0;
		for (HrMeasure current : hrs) {
			int value = current.getValue();
			minC = value<minC ? value : minC;
			maxC = value>maxC ? value : maxC;
		}
		assertEquals("Minimo NON CORRETTO", min, minC);
		assertEquals("Massimo NON CORRETTO", max, maxC);
		System.out.println(HrFileHandler.createString(hrs));
	}

	@Test
	public void testCalculateAverage() {
		
		List<HrMeasure> hrs=HrFileHandler.parse(read);
		Double avg=HrFileHandler.calculateAverage(hrs);
		assertEquals("Media non corretta", avg, media);
	}
	
	@Test
	public void testCombinePhases() {
		int wu=1;
		int ae=2;
		int cd=1;
		List<HrMeasure> hrs=HrFileHandler.combinePhases(70, 90, wu, 100, 200, ae, 90, 100, cd);
		assertEquals("Lunghezza array combined non corretta",hrs.size(),(wu+ae+cd)*60);
	}
	
	@Test
	public void testCalculateAllAverage() {
		int wu=1;
		int ae=2;
		int cd=1;
		List<HrMeasure> hrs=HrFileHandler.combinePhases(70, 90, wu, 100, 200, ae, 90, 100, cd);
		Double[] avgs=HrFileHandler.calculateAllAverage(hrs, wu, ae, cd);
		
		List<HrMeasure> hrswu = hrs.subList(0, 60*wu);
		List<HrMeasure> hrsae = hrs.subList(60*wu, 60*(wu+ae));
		List<HrMeasure> hrscd = hrs.subList( 60*(wu+ae), 60*(wu+ae+cd));
		
		Double avgwu = HrFileHandler.calculateAverage(hrswu);
		Double avgae = HrFileHandler.calculateAverage(hrsae);
		Double avgcd = HrFileHandler.calculateAverage(hrscd);
		
		assertEquals("Media WU non corretta",avgs[0],avgwu);
		assertEquals("Media AE non corretta",avgs[1],avgae);
		assertEquals("Media CD non corretta",avgs[2],avgcd);
		
	}
		

}
