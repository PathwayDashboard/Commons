package it.eng.pathway.utility;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import io.swagger.client.model.ActiveLifeStyleProgress;
import io.swagger.client.model.CardiacRehabilitationProgramme;
import io.swagger.client.model.CrProgressActiveLifestylePASessionSS;
import io.swagger.client.model.ExerClassSessionProgress;
import io.swagger.client.model.ExerClassSessionSS;
import io.swagger.client.model.ExerGameSessionProgress;
import io.swagger.client.model.ExerciseProgrammes;
import io.swagger.client.model.TrainingProfile;
import it.eng.pathway.fake.model.ActiveLifestylePAIntensityType;
import it.eng.pathway.fake.model.ActivityType;

public class CRProgressCreator {
	
	private static double wutp=0.115;
	private static double aetp=0.77;
	private static double cdtp=0.115;

	
	public static HashMap<String,Object> createProgress(CardiacRehabilitationProgramme crp, Date from, Date to){
		Integer N=2;
		
		HashMap<String, Object> result = new HashMap<String, Object>();
		System.out.println("createProgress");
		
		int days = DateMgt.getDays(from, to);
		ExerciseProgrammes programme = crp.getExerciseProgrammes();
		int exerclass=programme.getExerciseProgrammeNumberOfExerClass();
		int exergame=programme.getExerciseProgrammeNumberOfExerGame();
		int activity=programme.getExerciseProgrammeNumberOfActiveLifeStyleActivity();
		
		int weeks=((int) days/7);
		
		exerclass*=weeks;
		exergame*=weeks;
		activity*=weeks;
		
		int countClass=0;
		int countGame=0;
		int countActivity=0;
		
		Random r=new Random();
		
		ExerClassSessionProgress exClass=new ExerClassSessionProgress();
		List<ExerClassSessionSS> classSessions=new ArrayList<ExerClassSessionSS>();
		exClass.setExerClassSessionSSs(classSessions);
		
		ExerGameSessionProgress exGame = new ExerGameSessionProgress();
//		List<ExerGameSession> gameSessions=new ArrayList<ExerGameSession>();
//		ExerGameSession gameSession=new ExerGameSession();
//		gameSessions.setExerGameSessionSS(gameSessions)
		
		ActiveLifeStyleProgress paProgress=new ActiveLifeStyleProgress();
		List<CrProgressActiveLifestylePASessionSS> paSessions=new ArrayList<CrProgressActiveLifestylePASessionSS>();
		paProgress.setCrProgressActiveLifestylePASessionSSs(paSessions);
		
		TrainingProfile tp=crp.getTrainingProfile();
		Integer wuDuration=tp.getWarmingUpDuration();
		Integer wuMin=tp.getWarmingHRzoneMin();
		Integer wuMax=tp.getWarmingHRzoneMax();
		
		Integer aeDuration=tp.getMainDuration();
		Integer aeMin=tp.getMainHRzoneMin();
		Integer aeMax=tp.getMainHRzoneMax();
		
		Integer cdDuration=tp.getCooldownDuration();
		Integer cdMin=tp.getCooldownHRZoneMin();
		Integer cdMax=tp.getCooldownHRZoneMax();
		
		Calendar cal=GregorianCalendar.getInstance();
		cal.setTime(from);
		
		for (int i=0;i<days;i++){
		cal.add(Calendar.DAY_OF_MONTH, i);
		Date actual=cal.getTime();
		int choice;
		int perDay=0+r.nextInt(4);
		for (int j=0;j<perDay;j++){
			
			choice=r.nextInt(8);
			
			switch (choice) {
			case 0:
				break;
			case 1:
				if(countClass<exerclass+N){
					ExerClassSessionSS classSession=new ExerClassSessionSS();
					classSession.setCrProgressExerClassSessionDate(actual);
					cal.set(Calendar.HOUR_OF_DAY, r.nextInt(23));
					cal.set(Calendar.MINUTE,r.nextInt(59));
					String start=DateMgt.getReadableTime(cal);
					classSession.setCrProgressExerClassSessionStartTime(start);
					int duration=20+r.nextInt(45);
					cal.add(Calendar.MINUTE, duration);
					String end=DateMgt.getReadableTime(cal);
					classSession.setCrProgressExerClassSessionEndTime(end);
					classSession.setCrProgressExerClassSessionDuration(duration);
					
					classSession.setCrProgressExerClassSessionExpenditureObservationValue(350+r.nextInt(251));
					
					int min=wuMin;
					int max=wuMax;
					float avg=(max+min)/2;
					max=max+r.nextInt(8);
					
					classSession.setExerClassSessionWarningUpInfoDuration((int) Math.round(duration*wutp));
					classSession.setExerClassSessionWarningUpInfoMaxHRBpm(max);
					classSession.setExerClassSessionWarningUpInfoMinHRBpm(min);
					classSession.setExerClassSessionWarningUpInfoAverageHRBpm((double) avg);
					
					min=aeMin;
					max=aeMax;
					avg=(max+min)/2;
					max=max+r.nextInt(8);
					classSession.setExerClassSessionMainInfoDuration((int) Math.round(duration*aetp));
					classSession.setExerClassSessionMainInfoMaxHRBpm(max);
					classSession.setExerClassSessionMainInfoMinHRBpm(min);
					classSession.setExerClassSessionMainInfoAverageHRBpm((double) avg);

					
					min=cdMin;
					max=cdMax;
					avg=(max+min)/2;
					max=max+r.nextInt(8);
					classSession.setExerClassSessionCoolDownInfoDuration((int) Math.round(duration*cdtp));
					classSession.setExerClassSessionCoolDownInfoMaxHRBpm(max);
					classSession.setExerClassSessionCoolDownInfoMinHRBpm(min);
					classSession.setExerClassSessionCoolDownInfoAverageHRBpm((double) avg);
					
					
					classSessions.add(classSession);
					countClass++;
				}
				break;
				
			case 2:
				if(countGame<exergame+N){
					//dovrebbe essere sempre un array
					
					exGame.setCrProgressExerGameSessionDate(actual);
					cal.set(Calendar.HOUR_OF_DAY, r.nextInt(23));
					cal.set(Calendar.MINUTE,r.nextInt(59));
					String start=DateMgt.getReadableTime(cal);
					exGame.setCrProgressExerGameSessionStartTime(start);
					int duration=20+r.nextInt(45);
					cal.add(Calendar.MINUTE, duration);
					String end=DateMgt.getReadableTime(cal);
					exGame.setCrProgressExerGameSessionEndTime(end);
					exGame.setCrProgressExerGameSessionDuration(duration);
					
					exGame.setCrProgressExerGameSessionExependitureObservationValue(350+r.nextInt(251));
					
					exGame.setCrProgressExerGameSessionWarningUpInfoDuration((int) Math.round(duration*wutp));
					int min=wuMin;
					int max=wuMax;
					float avg=(max+min)/2;
					max=max+r.nextInt(8);
					
					exGame.setCrProgressExerGameSessionWarningUpInfoDuration((int) Math.round(duration*wutp));
					exGame.setCrProgressExerGameSessionWarningUpInfoMaxHRBpm(max);
					exGame.setCrProgressExerGameSessionWarningUpInfoMinHRBpm(min);
					exGame.setCrProgressExerGameSessionWarningUpInfoAverageHRBpm((double) avg);
					
					
					min=aeMin;
					max=aeMax;
					avg=(max+min)/2;
					max=max+r.nextInt(8);
					exGame.setCrProgressExerGameSessionMainInfoDuration((int) Math.round(duration*aetp));
					exGame.setCrProgressExerGameSessionMainInfoMaxHRBpm(max);
					exGame.setCrProgressExerGameSessionMainInfoMinHRBpm(min);
					exGame.setCrProgressExerGameSessionMainInfoAverageHRBpm((double) avg);
					
					
					min=cdMin;
					max=cdMax;
					avg=(max+min)/2;
					max=max+r.nextInt(8);
					exGame.setCrProgressExerGameSessionCoolDownInfoDuration((int) Math.round(duration*cdtp));
					exGame.setCrProgressExerGameSessionCoolDownInfoMaxHRBpm(max);
					exGame.setCrProgressExerGameSessionCoolDownInfoMinHRBpm(min);
					exGame.setCrProgressExerGameSessionCoolDownInfoAverageHRBpm((double) avg);

					
					exGame.setCrProgressExerGameSessionScore(5+r.nextInt(25));
					
//					sessions.add(exGame);
					countGame++;
				}
				break;
			case 3:
				if(countActivity<activity+N){
					
					CrProgressActiveLifestylePASessionSS pa = new CrProgressActiveLifestylePASessionSS();
					
					pa.setCrProgressActiveLifestylePASessionDate(actual);
					cal.set(Calendar.HOUR_OF_DAY, r.nextInt(23));
					cal.set(Calendar.MINUTE,r.nextInt(59));
					String start=DateMgt.getReadableTime(cal);
					pa.setCrProgressActiveLifestylePASessionStartTime(start);
					int duration=20+r.nextInt(45);
					cal.add(Calendar.MINUTE, duration);
					String end=DateMgt.getReadableTime(cal);
					pa.setCrProgressActiveLifestylePASessionEndTime(end);
					pa.setCrProgressActiveLifestylePASessionDuration(duration);
					
					pa.setCrProgressActiveLifestylePASessionExpenditureObservationValue(350+r.nextInt(251));
					
					pa.setCrProgressActiveLifestylePASessionType(r.nextInt(ActivityType.values().length));
					
					pa.setCrProgressActiveLifestylePASessionMonitored(r.nextInt(2));
					
					if (pa.getCrProgressActiveLifestylePASessionMonitored()!=0){
						pa.setCrProgressActiveLifestylePASessionStepsNumber(6000+r.nextInt(4000));
						pa.setCrProgressActiveLifestylePASessionAverageHeartRate(80+r.nextInt(90));
					}else{
						pa.setCrProgressActiveLifestylePASessionIntensity(r.nextInt(ActiveLifestylePAIntensityType.values().length));
						pa.setCrProgressActiveLifestylePASessionDescription("in the park");
					}
					
					
					paSessions.add(pa);
					
					countActivity++;
				}
				break;
			default:
				break;
			}
		}

		cal.add(Calendar.DAY_OF_MONTH, -i);
	}
		
		result.put("exerClass", exClass);
		result.put("exerGame", exGame);
		result.put("paSessions", paProgress);
		
		
		return result;
	}
	
	
	
//	public static CardiacRehabilitationProgress getSessions(CardiacRehabilitionProgramme crp, int days, Date startDate){
//	PwLogger.printMethod();
//	List<ExerciseSession> sessions=new ArrayList<ExerciseSession>();
//	
//	Calendar cal=GregorianCalendar.getInstance();
//	cal.setTime(startDate);
//	
//	CurrentExerciseProgramme programme=crp.getCurrentExerciseProgramme();
//	int exerclass=programme.getNumberOfExerclass();
//	int exergame=programme.getNumberOfExerGame();
//	int activity=programme.getNumberOfActiveLifeStyleActivity();
//	
//	int weeks=((int) days/7);
//	
//	exerclass*=weeks;
//	exergame*=weeks;
//	activity*=weeks;
//	
//	int countClass=0;
//	int countGame=0;
//	int countActivity=0;
//	
//	Random r=new Random();
//	CardiacRehabilitationProgress crs=new CardiacRehabilitationProgress();
//	TrainingProfile tp=crp.getTrainingProfile();
//	
////	List<CardiacRehabilitationProgress> crps=new ArrayList<CardiacRehabilitationProgress>();
//	for (int i=0;i<days;i++){
//		cal.add(Calendar.DAY_OF_MONTH, i);
//		Date actual=cal.getTime();
//		int choice;
//		int perDay=0+r.nextInt(4);
//		for (int j=0;j<perDay;j++){
//			
//			choice=r.nextInt(8);
//			
//			switch (choice) {
//			case 0:
//				break;
//			case 1:
//				if(countClass<exerclass+N){
//					ExerClassSession exClass=new ExerClassSession();
//					exClass.setDate(actual);
//					cal.set(Calendar.HOUR_OF_DAY, r.nextInt(23));
//					cal.set(Calendar.MINUTE,r.nextInt(59));
//					String start=DateMgt.getReadableTime(cal);
//					exClass.setStartTime(start);
//					int duration=20+r.nextInt(45);
//					cal.add(Calendar.MINUTE, duration);
//					String end=DateMgt.getReadableTime(cal);
//					exClass.setEndTime(end);
//					exClass.setDuration(duration);
//					
//					EnergyExpenditureObservation kcal=new EnergyExpenditureObservation();
//					kcal.setValue(350+r.nextInt(251));
//					exClass.setEnergyExpenditure(kcal);
//					
//					TrainingPhaseInfo wu=new TrainingPhaseInfo();
//					wu.setDuration((int) Math.round(duration*wutp));
//					int min=tp.getWarmingHRzoneMin();
//					int max=tp.getWarmingHRzoneMax();
//					float avg=(max+min)/2;
//					max=max+r.nextInt(8);
//					wu.setMaxHR(max);
//					wu.setMinHR(min);
//					wu.setAverageHR(avg);
//					exClass.setWarmingDuration(wu);
//					
////					TrainingPhaseInfo st=new TrainingPhaseInfo();
////					st.setDuration((int) Math.round(duration*sttp));
////					min=tp.getStretchingHRzoneMin();
////					max=tp.getStretchingHRzoneMax();
////					avg=(max+min)/2;
////					max=max+r.nextInt(8);
////					st.setMaxHR(max);
////					st.setMinHR(min);
////					st.setAverageHR(avg);
////					exClass.setStretchingDuration(st);
//					
//					TrainingPhaseInfo ae=new TrainingPhaseInfo();
//					ae.setDuration((int) Math.round(duration*aetp));
//					min=tp.getMainHRzoneMin();
//					max=tp.getMainHRzoneMax();
//					avg=(max+min)/2;
//					max=max+r.nextInt(8);
//					ae.setMaxHR(max);
//					ae.setMinHR(min);
//					ae.setAverageHR(avg);
//					exClass.setMainDuration(ae);
//					
//					TrainingPhaseInfo cd=new TrainingPhaseInfo();
//					cd.setDuration((int) Math.round(duration*cdtp));
//					min=tp.getCooldownHRZoneMin();
//					max=tp.getCooldownHRZoneMax();
//					avg=(max+min)/2;
//					max=max+r.nextInt(8);
//					cd.setMaxHR(max);
//					cd.setMinHR(min);
//					cd.setAverageHR(avg);
//					exClass.setCoolDownDuration(cd);
//					
////
////					TrainingPhaseInfo rx=new TrainingPhaseInfo();
////					rx.setDuration((int) Math.round(duration*rxtp));
////					min=tp.getRelaxationHRzoneMin();
////					max=tp.getRelaxationHRzoneMax();
////					avg=(max+min)/2;
////					max=max+r.nextInt(8);
////					rx.setMaxHR(max);
////					rx.setMinHR(min);
////					rx.setAverageHR(avg);
////					exClass.setRelaxationDuration(rx);
//					
//					sessions.add(exClass);
//					countClass++;
//				}
//				break;
//				
//			case 2:
//				if(countGame<exergame+N){
//					ExerGameSession exGame=new ExerGameSession();
//					exGame.setDate(actual);
//					cal.set(Calendar.HOUR_OF_DAY, r.nextInt(23));
//					cal.set(Calendar.MINUTE,r.nextInt(59));
//					String start=DateMgt.getReadableTime(cal);
//					exGame.setStartTime(start);
//					int duration=20+r.nextInt(45);
//					cal.add(Calendar.MINUTE, duration);
//					String end=DateMgt.getReadableTime(cal);
//					exGame.setEndTime(end);
//					exGame.setDuration(duration);
//					
//					EnergyExpenditureObservation kcal=new EnergyExpenditureObservation();
//					kcal.setValue(350+r.nextInt(251));
//					exGame.setEnergyExpenditure(kcal);
//					
//					TrainingPhaseInfo wu=new TrainingPhaseInfo();
//					wu.setDuration((int) Math.round(duration*wutp));
//					int min=tp.getWarmingHRzoneMin();
//					int max=tp.getWarmingHRzoneMax();
//					float avg=(max+min)/2;
//					max=max+r.nextInt(8);
//					wu.setMaxHR(max);
//					wu.setMinHR(min);
//					wu.setAverageHR(avg);
//					exGame.setWarmingDuration(wu);
//					
////					TrainingPhaseInfo st=new TrainingPhaseInfo();
////					st.setDuration((int) Math.round(duration*sttp));
////					min=tp.getStretchingHRzoneMin();
////					max=tp.getStretchingHRzoneMax();
////					avg=(max+min)/2;
////					max=max+r.nextInt(8);
////					st.setMaxHR(max);
////					st.setMinHR(min);
////					st.setAverageHR(avg);
////					exGame.setStretchingDuration(st);
//					
//					TrainingPhaseInfo ae=new TrainingPhaseInfo();
//					ae.setDuration((int) Math.round(duration*aetp));
//					min=tp.getMainHRzoneMin();
//					max=tp.getMainHRzoneMax();
//					avg=(max+min)/2;
//					max=max+r.nextInt(8);
//					ae.setMaxHR(max);
//					ae.setMinHR(min);
//					ae.setAverageHR(avg);
//					exGame.setMainDuration(ae);
//					
////					exGame.setCoolDownDuration((int) Math.round(duration*cdtp));
////					
////					exGame.setRelaxationDuration((int) Math.round(duration*wutp));
//					
//					TrainingPhaseInfo cd=new TrainingPhaseInfo();
//					cd.setDuration((int) Math.round(duration*cdtp));
//					min=tp.getCooldownHRZoneMin();
//					max=tp.getCooldownHRZoneMax();
//					avg=(max+min)/2;
//					max=max+r.nextInt(8);
//					cd.setMaxHR(max);
//					cd.setMinHR(min);
//					cd.setAverageHR(avg);
//					exGame.setCoolDownDuration(cd);
//					
//
//					
//					exGame.setScore(5+r.nextInt(25));
//					
//					sessions.add(exGame);
//					countGame++;
//				}
//				break;
//			case 3:
//				if(countActivity<activity+N){
//					
//					ActiveLifestylePASession pa=new ActiveLifestylePASession();
//					pa.setDate(actual);
//					cal.set(Calendar.HOUR_OF_DAY, r.nextInt(23));
//					cal.set(Calendar.MINUTE,r.nextInt(59));
//					String start=DateMgt.getReadableTime(cal);
//					pa.setStartTime(start);
//					int duration=20+r.nextInt(45);
//					cal.add(Calendar.MINUTE, duration);
//					String end=DateMgt.getReadableTime(cal);
//					pa.setEndTime(end);
//					pa.setDuration(duration);
//					
//					EnergyExpenditureObservation kcal=new EnergyExpenditureObservation();
//					kcal.setValue(350+r.nextInt(251));
//					pa.setEnergyExpenditure(kcal);
//					
//					pa.setType(ActivityType.values()[r.nextInt(3)]);
//					
//					pa.setMonitored(!(r.nextInt(4)==0));
//					if (pa.isMonitored()){
//						pa.setStepsNumber(6000+r.nextInt(4000));
//						pa.setAverageHeartRate(120);
//					}else{
//						pa.setIntensity(ActiveLifestylePAIntensityType.MODERATE);
//						pa.setDescription("in the park");
//					}
//					
//					pa.setIntensity(ActiveLifestylePAIntensityType.values()[r.nextInt(3)]);
//					
//					sessions.add(pa);
//					
//					countActivity++;
//				}
//				break;
//			default:
//				break;
//			}
//		}
//
//		cal.add(Calendar.DAY_OF_MONTH, -i);
//	}
//	
//	crs.setExerciseSession(sessions);
//	
//	return crs;
//}
	
}
