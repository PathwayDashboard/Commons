package it.eng.pathway.utility;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.joda.time.DateTime;

import io.swagger.client.model.ActiveLifestylePASessionSubsection;
import io.swagger.client.model.ExerClassSessionCoolDownInfohrRange;
import io.swagger.client.model.ExerClassSessionSubsection;
import io.swagger.client.model.ExerClassSessioncoolDownInfoSubSubsection;
import io.swagger.client.model.ExerClassSessionmainInfoSubSubsection;
import io.swagger.client.model.ExerClassSessionmainInfohrRange;
import io.swagger.client.model.ExerClassSessionwarmingUpInfoSubSubsection;
import io.swagger.client.model.ExerClassSessionwarmingUpInfohrRange;
import io.swagger.client.model.ExerGameSessionSubsection;
import io.swagger.client.model.ExerGameSessioncoolDownInfoSubSubsection;
import io.swagger.client.model.ExerGameSessionmainInfoSubSubsection;
import io.swagger.client.model.ExerGameSessionwarmingUpInfoSubSubsection;
import io.swagger.client.model.ExerciseProgrammeSubSection;
import it.eng.pathway.fake.model.ActiveLifestylePAIntensityType;
import it.eng.pathway.fake.model.ActivityType;

public class CRProgressCreator {
	
	private static double wutp=0.115;
	private static double aetp=0.77;
	private static double cdtp=0.115;
	
	
	public static HashMap<String,Object> createProgress(ExerciseProgrammeSubSection programme, Date from, Date to){
		Integer N=2;
		
		HashMap<String, Object> result = new HashMap<String, Object>();
		System.out.println("createProgress");
		
		int days = DateMgt.getDays(from, to);
		if (programme!=null){
			int exerclass=programme.getNumberOfExerClass();
			int exergame=programme.getNumberOfExerGame();
			int activity=programme.getNumberOfActiveLifeStyleActivity();
			
			int classDuration=programme.getClassDuration();
			int gameDuration=programme.getGameDuration();
			
			int weeks=((int) days/7);
			
			exerclass*=weeks;
			exergame*=weeks;
			activity*=weeks;
			
			int countClass=0;
			int countGame=0;
			int countActivity=0;
			
			Random r=new Random();
			
//			ExerClassSessionProgress exClass=new ExerClassSessionProgress();
			List<ExerClassSessionSubsection> classSessions=new ArrayList<ExerClassSessionSubsection>();
//			exClass.setExerClassSessionsss(classSessions);
			
//			ExerGameSessionProgress exGame = new ExerGameSessionProgress();
			List<ExerGameSessionSubsection> gameSessions=new ArrayList<ExerGameSessionSubsection>();
//			ExerGameSession gameSession=new ExerGameSession();
//			gameSessions.setExerGameSessionSS(gameSessions)
			
//			ActiveLifeStyleProgress paProgress=new ActiveLifeStyleProgress();
			List<ActiveLifestylePASessionSubsection> paSessions=new ArrayList<ActiveLifestylePASessionSubsection>();
//			paProgress.setActiveLifestylePASessionSSs(paSessions);
			
//			Integer wuDuration=tp.getWarmingUpDuration();
//			Integer wuMin=tp.getWarmingHRzoneMin();
//			Integer wuMax=tp.getWarmingHRzoneMax();
//			
//			Integer aeDuration=tp.getMainDuration();
//			Integer aeMin=tp.getMainHRzoneMin();
//			Integer aeMax=tp.getMainHRzoneMax();
//			
//			Integer cdDuration=tp.getCooldownDuration();
//			Integer cdMin=tp.getCooldownHRZoneMin();
//			Integer cdMax=tp.getCooldownHRZoneMax();
			
			Integer wuDuration=(int) (classDuration*wutp);
			Integer wuMin=80;
			Integer wuMax=110;
			
			Integer aeDuration=(int) (classDuration*aetp);
			Integer aeMin=110;
			Integer aeMax=175;
			
			Integer cdDuration=(int) (classDuration*cdtp);
			Integer cdMin=120;
			Integer cdMax=90;
			
			Calendar cal=GregorianCalendar.getInstance();
			cal.setTime(from);
			
			for (int i=0;i<days;i++){
			cal.add(Calendar.DAY_OF_MONTH, i);
			Date actual=cal.getTime();
			int choice;
			int perDay=0+r.nextInt(4);
			for (int j=0;j<perDay;j++){
				
				choice=r.nextInt(8);
				
				switch (choice) {
				case 0:
					break;
				case 1:
					if(countClass<exerclass+N){
						ExerClassSessionSubsection classSession=new ExerClassSessionSubsection();
						DateTime dt=new DateTime(actual.getTime());
						classSession.setDate(dt.toDate());
						cal.set(Calendar.HOUR_OF_DAY, r.nextInt(23));
						cal.set(Calendar.MINUTE,r.nextInt(59));
						String start=DateMgt.getReadableTime(cal);
						classSession.setStartTime(start);
						int duration=20+r.nextInt(45);
						cal.add(Calendar.MINUTE, duration);
						String end=DateMgt.getReadableTime(cal);
						classSession.setEndTime(end);
						classSession.setDuration(duration);
						
						classSession.setEnergyExpenditure(350+r.nextInt(251));
						
						int min=wuMin;
						int max=wuMax;
						float avg=(max+min)/2;
						max=max+r.nextInt(8);
						
						ExerClassSessionwarmingUpInfoSubSubsection wu = new ExerClassSessionwarmingUpInfoSubSubsection();
						classSession.setWarmingUpInfo(wu);
						wu.setAverageHRBpm((int) avg);
						wu.setDuration((int) Math.round(duration*wutp));
						ExerClassSessionwarmingUpInfohrRange wuR = new ExerClassSessionwarmingUpInfohrRange();
						wuR.setMaximumHR(max);
						wuR.setMinimumHR(min);
						wu.setHrRange(wuR);
						
						
						ExerClassSessionmainInfoSubSubsection main = new ExerClassSessionmainInfoSubSubsection();
						classSession.setMainInfo(main);
						min=aeMin;
						max=aeMax;
						avg=(max+min)/2;
						max=max+r.nextInt(8);
						main.setAverageHRBpm((int) avg);
						main.setDuration((int) Math.round(duration*aetp));
						ExerClassSessionmainInfohrRange mainR = new ExerClassSessionmainInfohrRange();
						mainR.setMaximumHR(max);
						mainR.setMinimumHR(min);
						main.setHrRange(mainR );

						
						
						ExerClassSessioncoolDownInfoSubSubsection cd = new ExerClassSessioncoolDownInfoSubSubsection();
						classSession.setCoolDownInfo(cd);
						min=cdMin;
						max=cdMax;
						avg=(max+min)/2;
						max=max+r.nextInt(8);
						
						cd.setAverageHRBpm((int) avg);
						cd.setDuration((int) Math.round(duration*cdtp));
						ExerClassSessionCoolDownInfohrRange cdR = new ExerClassSessionCoolDownInfohrRange();
						cdR.setMaximumHR(max);
						cdR.setMinimumHR(min);
						cd.setHrRange(cdR);
						
						classSession.setId(null);
						
						classSessions.add(classSession);
						countClass++;
					}
					break;
					
				case 2:
					if(countGame<exergame+N){
						//dovrebbe essere sempre un array
						
						ExerGameSessionSubsection exGame=new ExerGameSessionSubsection();
						DateTime dt=new DateTime(actual.getTime());
						exGame.setDate(dt.toDate());
						cal.set(Calendar.HOUR_OF_DAY, r.nextInt(23));
						cal.set(Calendar.MINUTE,r.nextInt(59));
						String start=DateMgt.getReadableTime(cal);
						exGame.setStartTime(start);
						int duration=20+r.nextInt(45);
						cal.add(Calendar.MINUTE, duration);
						String end=DateMgt.getReadableTime(cal);
						exGame.setEndTime(end);
						exGame.setDuration(duration);
						
						exGame.setEnergyExpenditure(350+r.nextInt(251));
						
						
						int min=wuMin;
						int max=wuMax;
						float avg=(max+min)/2;
						max=max+r.nextInt(8);
						
						ExerGameSessionwarmingUpInfoSubSubsection wu = new ExerGameSessionwarmingUpInfoSubSubsection();
						exGame.setWarmingupInfo(wu);
						wu.setAverageHRBpm((int) avg);
						wu.setDuration((int) Math.round(duration*wutp));
						wu.setMaxHRBpm(max);
						wu.setMinHRBpm(min);
						
						
						ExerGameSessionmainInfoSubSubsection main = new ExerGameSessionmainInfoSubSubsection();
						exGame.setMainInfo(main);
						min=aeMin;
						max=aeMax;
						avg=(max+min)/2;
						max=max+r.nextInt(8);
						main.setAverageHRBpm((double) avg);
						main.setDuration((int) Math.round(duration*aetp));
						main.setMaxHRBpm(max);
						main.setMinHRBpm(min);

						ExerGameSessioncoolDownInfoSubSubsection cd = new ExerGameSessioncoolDownInfoSubSubsection();
						exGame.setCooldownInfo(cd);
						
						min=cdMin;
						max=cdMax;
						avg=(max+min)/2;
						max=max+r.nextInt(8);
						
						cd.setAverageHRBpm((double) avg);
						cd.setDuration((int) Math.round(duration*cdtp));
						cd.setMaxHRBpm(max);
						cd.setMinHRBpm(min);
						
						exGame.setScore(5+r.nextInt(25));
						
						exGame.setId(null);
						
						gameSessions.add(exGame);
						countGame++;
					}
					break;
				case 3:
					if(countActivity<activity+N){
						
						ActiveLifestylePASessionSubsection pa = new ActiveLifestylePASessionSubsection();
						DateTime dt=new DateTime(actual.getTime());
						pa.setDate(dt.toDate());

						cal.set(Calendar.HOUR_OF_DAY, r.nextInt(23));
						cal.set(Calendar.MINUTE,r.nextInt(59));
						String start=DateMgt.getReadableTime(cal);
						pa.setStartTime(start);
						
						int duration=20+r.nextInt(45);
						cal.add(Calendar.MINUTE, duration);
						String end=DateMgt.getReadableTime(cal);
						pa.setEndTime(end);
						pa.setDuration(duration);
						
						pa.setEnergyExpenditure(350+r.nextInt(251));
						
						pa.setType(r.nextInt(ActivityType.values().length));
						
						pa.setMonitored(r.nextInt(2));
						
						if (pa.getMonitored()!=0){
							pa.setStepsNumber(6000+r.nextInt(4000));
							pa.setAverageHeartRate(80+r.nextInt(90));
						}else{
							pa.setIntensity(r.nextInt(ActiveLifestylePAIntensityType.values().length));
							pa.setDescription("in the park ["+countActivity+"]");
						}

						paSessions.add(pa);
						countActivity++;
					}
					break;
				default:
					break;
				}
			}

			cal.add(Calendar.DAY_OF_MONTH, -i);
		}
			
			result.put("exerClass", classSessions);
			result.put("exerGame", gameSessions);
			result.put("paSessions", paSessions);
			
			
			return result;
		}else{
			return null;
		}
		
		
	}

	
//	public static HashMap<String,Object> createProgress(CardiacRehabilitationProgramme crp, Date from, Date to){
//		Integer N=2;
//		
//		HashMap<String, Object> result = new HashMap<String, Object>();
//		System.out.println("createProgress");
//		
//		int days = DateMgt.getDays(from, to);
//		List<ExerciseProgramme> programmes = crp.getExerciseProgrammes();
//		if (programmes!=null && programmes.size()>0){
//			ExerciseProgramme programme=programmes.get(0);
//			int exerclass=programme.getNumberOfExerClass();
//			int exergame=programme.getNumberOfExerGame();
//			int activity=programme.getNumberOfActiveLifeStyleActivity();
//			
//			int classDuration=programme.getClassDuration();
//			int gameDuration=programme.getGameDuration();
//			
//			int weeks=((int) days/7);
//			
//			exerclass*=weeks;
//			exergame*=weeks;
//			activity*=weeks;
//			
//			int countClass=0;
//			int countGame=0;
//			int countActivity=0;
//			
//			Random r=new Random();
//			
//			ExerClassSessionProgress exClass=new ExerClassSessionProgress();
//			List<ExerClassSessionss> classSessions=new ArrayList<ExerClassSessionss>();
//			exClass.setExerClassSessionsss(classSessions);
//			
//			ExerGameSessionProgress exGame = new ExerGameSessionProgress();
////			List<ExerGameSession> gameSessions=new ArrayList<ExerGameSession>();
////			ExerGameSession gameSession=new ExerGameSession();
////			gameSessions.setExerGameSessionSS(gameSessions)
//			
//			ActiveLifeStyleProgress paProgress=new ActiveLifeStyleProgress();
//			List<ActiveLifestylePASessionSS> paSessions=new ArrayList<ActiveLifestylePASessionSS>();
//			paProgress.setActiveLifestylePASessionSSs(paSessions);
//			
////			Integer wuDuration=tp.getWarmingUpDuration();
////			Integer wuMin=tp.getWarmingHRzoneMin();
////			Integer wuMax=tp.getWarmingHRzoneMax();
////			
////			Integer aeDuration=tp.getMainDuration();
////			Integer aeMin=tp.getMainHRzoneMin();
////			Integer aeMax=tp.getMainHRzoneMax();
////			
////			Integer cdDuration=tp.getCooldownDuration();
////			Integer cdMin=tp.getCooldownHRZoneMin();
////			Integer cdMax=tp.getCooldownHRZoneMax();
//			
//			Integer wuDuration=(int) (classDuration*wutp);
//			Integer wuMin=80;
//			Integer wuMax=110;
//			
//			Integer aeDuration=(int) (classDuration*aetp);
//			Integer aeMin=110;
//			Integer aeMax=175;
//			
//			Integer cdDuration=(int) (classDuration*cdtp);
//			Integer cdMin=120;
//			Integer cdMax=90;
//			
//			Calendar cal=GregorianCalendar.getInstance();
//			cal.setTime(from);
//			
//			for (int i=0;i<days;i++){
//			cal.add(Calendar.DAY_OF_MONTH, i);
//			Date actual=cal.getTime();
//			int choice;
//			int perDay=0+r.nextInt(4);
//			for (int j=0;j<perDay;j++){
//				
//				choice=r.nextInt(8);
//				
//				switch (choice) {
//				case 0:
//					break;
//				case 1:
//					if(countClass<exerclass+N){
//						ExerClassSessionss classSession=new ExerClassSessionss();
//						classSession.setExerClassSessiondate(actual);
//						cal.set(Calendar.HOUR_OF_DAY, r.nextInt(23));
//						cal.set(Calendar.MINUTE,r.nextInt(59));
//						String start=DateMgt.getReadableTime(cal);
//						classSession.setExerClassSessionstartTime(start);
//						int duration=20+r.nextInt(45);
//						cal.add(Calendar.MINUTE, duration);
//						String end=DateMgt.getReadableTime(cal);
//						classSession.setExerClassSessionendTime(end);
//						classSession.setExerClassSessionDuration(duration);
//						
//						classSession.setExerClassSessionexpenditureObservationValue(350+r.nextInt(251));
//						
//						int min=wuMin;
//						int max=wuMax;
//						float avg=(max+min)/2;
//						max=max+r.nextInt(8);
//						
//						classSession.setExerClassSessionwarmingUpDuration((int) Math.round(duration*wutp));
//						classSession.setExerClassSessionwarmingUpHRBpmMax(max);
//						classSession.setExerClassSessionwarmingUpHRBpmMin(min);
//						classSession.setExerClassSessionwarmingUpAverageHRBpm((int) avg);
//						
//						min=aeMin;
//						max=aeMax;
//						avg=(max+min)/2;
//						max=max+r.nextInt(8);
//						classSession.setExerClassSessionmainInfoDuration((int) Math.round(duration*aetp));
//						classSession.setExerClassSessionmainInfoMaxHRBpm(max);
//						classSession.setExerClassSessionmainInfoMinHRBpm(min);
//						classSession.setExerClassSessionmainInfoAverageHRBpm((double) avg);
//
//						
//						min=cdMin;
//						max=cdMax;
//						avg=(max+min)/2;
//						max=max+r.nextInt(8);
//						classSession.setExerClassSessioncoolDownInfoDuration((int) Math.round(duration*cdtp));
//						classSession.setExerClassSessioncoolDownInfoMaxHRBpm(max);
//						classSession.setExerClassSessioncoolDownInfoMinHRBpm(min);
//						classSession.setExerClassSessioncoolDownInfoAverageHRBpm((double) avg);
//						
//						
//						classSessions.add(classSession);
//						countClass++;
//					}
//					break;
//					
//				case 2:
//					if(countGame<exergame+N){
//						//dovrebbe essere sempre un array
//						
//						exGame.setExerGameSessiondate(actual);
//						cal.set(Calendar.HOUR_OF_DAY, r.nextInt(23));
//						cal.set(Calendar.MINUTE,r.nextInt(59));
//						String start=DateMgt.getReadableTime(cal);
//						exGame.setExerGameSessionstartTime(start);
//						int duration=20+r.nextInt(45);
//						cal.add(Calendar.MINUTE, duration);
//						String end=DateMgt.getReadableTime(cal);
//						exGame.setExerGameSessionendTime(end);
//						exGame.setExerGameSessionduration(duration);
//						
//						exGame.setExerGameSessionexependitureObservationValue(350+r.nextInt(251));
//						
//						exGame.setExerGameSessionwarmingUpInfoDuration((int) Math.round(duration*wutp));
//						int min=wuMin;
//						int max=wuMax;
//						float avg=(max+min)/2;
//						max=max+r.nextInt(8);
//						
//						exGame.setExerGameSessionwarmingUpInfoDuration((int) Math.round(duration*wutp));
//						exGame.setExerGameSessionwarmingUpInfoMaxHRBpm(max);
//						exGame.setExerGameSessionwarmingUpInfoMinHRBpm(min);
//						exGame.setExerGameSessionwarmingUpInfoAverageHRBpm((double) avg);
//						
//						
//						min=aeMin;
//						max=aeMax;
//						avg=(max+min)/2;
//						max=max+r.nextInt(8);
//						exGame.setExerGameSessionmainInfoDuration((int) Math.round(duration*aetp));
//						exGame.setExerGameSessionmainInfoMaxHRBpm(max);
//						exGame.setExerGameSessionmainInfoMinHRBpm(min);
//						exGame.setExerGameSessionmainInfoAverageHRBpm((double) avg);
//						
//						
//						min=cdMin;
//						max=cdMax;
//						avg=(max+min)/2;
//						max=max+r.nextInt(8);
//						exGame.setExerGameSessioncoolDownInfoDuration((int) Math.round(duration*cdtp));
//						exGame.setExerGameSessioncoolDownInfoMaxHRBpm(max);
//						exGame.setExerGameSessioncoolDownInfoMinHRBpm(min);
//						exGame.setExerGameSessioncoolDownInfoAverageHRBpm((double) avg);
//
//						
//						exGame.setExerGameSessionscore(5+r.nextInt(25));
//						
////						sessions.add(exGame);
//						countGame++;
//					}
//					break;
//				case 3:
//					if(countActivity<activity+N){
//						
//						ActiveLifestylePASessionSS pa = new ActiveLifestylePASessionSS();
//						
//						pa.setActiveLifestylePASessiondate(actual);
//						cal.set(Calendar.HOUR_OF_DAY, r.nextInt(23));
//						cal.set(Calendar.MINUTE,r.nextInt(59));
//						String start=DateMgt.getReadableTime(cal);
//						pa.setActiveLifestylePASessionstartTime(start);
//						int duration=20+r.nextInt(45);
//						cal.add(Calendar.MINUTE, duration);
//						String end=DateMgt.getReadableTime(cal);
//						pa.setActiveLifestylePASessionendTime(end);
//						pa.setActiveLifestylePASessionduration(duration);
//						
//						pa.setActiveLifestylePASessionexpenditureObservationValue(350+r.nextInt(251));
//						
//						pa.setActiveLifestylePASessiontype(r.nextInt(ActivityType.values().length));
//						
//						pa.setActiveLifestylePASessionmonitored(r.nextInt(2));
//						
//						if (pa.getActiveLifestylePASessionmonitored()!=0){
//							pa.setActiveLifestylePASessionstepsNumber(6000+r.nextInt(4000));
//							pa.setActiveLifestylePASessionaverageHeartRate(80+r.nextInt(90));
//						}else{
//							pa.setActiveLifestylePASessionintensity(r.nextInt(ActiveLifestylePAIntensityType.values().length));
//							pa.setActiveLifestylePASessiondescription("in the park");
//						}
//						
//						
//						paSessions.add(pa);
//						
//						countActivity++;
//					}
//					break;
//				default:
//					break;
//				}
//			}
//
//			cal.add(Calendar.DAY_OF_MONTH, -i);
//		}
//			
//			result.put("exerClass", exClass);
//			result.put("exerGame", exGame);
//			result.put("paSessions", paProgress);
//			
//			
//			return result;
//		}else{
//			return null;
//		}
//		
//		
//	}
	
	
	
//	public static CardiacRehabilitationProgress getSessions(CardiacRehabilitionProgramme crp, int days, Date startDate){
//	PwLogger.printMethod();
//	List<ExerciseSession> sessions=new ArrayList<ExerciseSession>();
//	
//	Calendar cal=GregorianCalendar.getInstance();
//	cal.setTime(startDate);
//	
//	CurrentExerciseProgramme programme=crp.getCurrentExerciseProgramme();
//	int exerclass=programme.getNumberOfExerclass();
//	int exergame=programme.getNumberOfExerGame();
//	int activity=programme.getNumberOfActiveLifeStyleActivity();
//	
//	int weeks=((int) days/7);
//	
//	exerclass*=weeks;
//	exergame*=weeks;
//	activity*=weeks;
//	
//	int countClass=0;
//	int countGame=0;
//	int countActivity=0;
//	
//	Random r=new Random();
//	CardiacRehabilitationProgress crs=new CardiacRehabilitationProgress();
//	TrainingProfile tp=crp.getTrainingProfile();
//	
////	List<CardiacRehabilitationProgress> crps=new ArrayList<CardiacRehabilitationProgress>();
//	for (int i=0;i<days;i++){
//		cal.add(Calendar.DAY_OF_MONTH, i);
//		Date actual=cal.getTime();
//		int choice;
//		int perDay=0+r.nextInt(4);
//		for (int j=0;j<perDay;j++){
//			
//			choice=r.nextInt(8);
//			
//			switch (choice) {
//			case 0:
//				break;
//			case 1:
//				if(countClass<exerclass+N){
//					ExerClassSession exClass=new ExerClassSession();
//					exClass.setDate(actual);
//					cal.set(Calendar.HOUR_OF_DAY, r.nextInt(23));
//					cal.set(Calendar.MINUTE,r.nextInt(59));
//					String start=DateMgt.getReadableTime(cal);
//					exClass.setStartTime(start);
//					int duration=20+r.nextInt(45);
//					cal.add(Calendar.MINUTE, duration);
//					String end=DateMgt.getReadableTime(cal);
//					exClass.setEndTime(end);
//					exClass.setDuration(duration);
//					
//					EnergyExpenditureObservation kcal=new EnergyExpenditureObservation();
//					kcal.setValue(350+r.nextInt(251));
//					exClass.setEnergyExpenditure(kcal);
//					
//					TrainingPhaseInfo wu=new TrainingPhaseInfo();
//					wu.setDuration((int) Math.round(duration*wutp));
//					int min=tp.getWarmingHRzoneMin();
//					int max=tp.getWarmingHRzoneMax();
//					float avg=(max+min)/2;
//					max=max+r.nextInt(8);
//					wu.setMaxHR(max);
//					wu.setMinHR(min);
//					wu.setAverageHR(avg);
//					exClass.setWarmingDuration(wu);
//					
////					TrainingPhaseInfo st=new TrainingPhaseInfo();
////					st.setDuration((int) Math.round(duration*sttp));
////					min=tp.getStretchingHRzoneMin();
////					max=tp.getStretchingHRzoneMax();
////					avg=(max+min)/2;
////					max=max+r.nextInt(8);
////					st.setMaxHR(max);
////					st.setMinHR(min);
////					st.setAverageHR(avg);
////					exClass.setStretchingDuration(st);
//					
//					TrainingPhaseInfo ae=new TrainingPhaseInfo();
//					ae.setDuration((int) Math.round(duration*aetp));
//					min=tp.getMainHRzoneMin();
//					max=tp.getMainHRzoneMax();
//					avg=(max+min)/2;
//					max=max+r.nextInt(8);
//					ae.setMaxHR(max);
//					ae.setMinHR(min);
//					ae.setAverageHR(avg);
//					exClass.setMainDuration(ae);
//					
//					TrainingPhaseInfo cd=new TrainingPhaseInfo();
//					cd.setDuration((int) Math.round(duration*cdtp));
//					min=tp.getCooldownHRZoneMin();
//					max=tp.getCooldownHRZoneMax();
//					avg=(max+min)/2;
//					max=max+r.nextInt(8);
//					cd.setMaxHR(max);
//					cd.setMinHR(min);
//					cd.setAverageHR(avg);
//					exClass.setCoolDownDuration(cd);
//					
////
////					TrainingPhaseInfo rx=new TrainingPhaseInfo();
////					rx.setDuration((int) Math.round(duration*rxtp));
////					min=tp.getRelaxationHRzoneMin();
////					max=tp.getRelaxationHRzoneMax();
////					avg=(max+min)/2;
////					max=max+r.nextInt(8);
////					rx.setMaxHR(max);
////					rx.setMinHR(min);
////					rx.setAverageHR(avg);
////					exClass.setRelaxationDuration(rx);
//					
//					sessions.add(exClass);
//					countClass++;
//				}
//				break;
//				
//			case 2:
//				if(countGame<exergame+N){
//					ExerGameSession exGame=new ExerGameSession();
//					exGame.setDate(actual);
//					cal.set(Calendar.HOUR_OF_DAY, r.nextInt(23));
//					cal.set(Calendar.MINUTE,r.nextInt(59));
//					String start=DateMgt.getReadableTime(cal);
//					exGame.setStartTime(start);
//					int duration=20+r.nextInt(45);
//					cal.add(Calendar.MINUTE, duration);
//					String end=DateMgt.getReadableTime(cal);
//					exGame.setEndTime(end);
//					exGame.setDuration(duration);
//					
//					EnergyExpenditureObservation kcal=new EnergyExpenditureObservation();
//					kcal.setValue(350+r.nextInt(251));
//					exGame.setEnergyExpenditure(kcal);
//					
//					TrainingPhaseInfo wu=new TrainingPhaseInfo();
//					wu.setDuration((int) Math.round(duration*wutp));
//					int min=tp.getWarmingHRzoneMin();
//					int max=tp.getWarmingHRzoneMax();
//					float avg=(max+min)/2;
//					max=max+r.nextInt(8);
//					wu.setMaxHR(max);
//					wu.setMinHR(min);
//					wu.setAverageHR(avg);
//					exGame.setWarmingDuration(wu);
//					
////					TrainingPhaseInfo st=new TrainingPhaseInfo();
////					st.setDuration((int) Math.round(duration*sttp));
////					min=tp.getStretchingHRzoneMin();
////					max=tp.getStretchingHRzoneMax();
////					avg=(max+min)/2;
////					max=max+r.nextInt(8);
////					st.setMaxHR(max);
////					st.setMinHR(min);
////					st.setAverageHR(avg);
////					exGame.setStretchingDuration(st);
//					
//					TrainingPhaseInfo ae=new TrainingPhaseInfo();
//					ae.setDuration((int) Math.round(duration*aetp));
//					min=tp.getMainHRzoneMin();
//					max=tp.getMainHRzoneMax();
//					avg=(max+min)/2;
//					max=max+r.nextInt(8);
//					ae.setMaxHR(max);
//					ae.setMinHR(min);
//					ae.setAverageHR(avg);
//					exGame.setMainDuration(ae);
//					
////					exGame.setCoolDownDuration((int) Math.round(duration*cdtp));
////					
////					exGame.setRelaxationDuration((int) Math.round(duration*wutp));
//					
//					TrainingPhaseInfo cd=new TrainingPhaseInfo();
//					cd.setDuration((int) Math.round(duration*cdtp));
//					min=tp.getCooldownHRZoneMin();
//					max=tp.getCooldownHRZoneMax();
//					avg=(max+min)/2;
//					max=max+r.nextInt(8);
//					cd.setMaxHR(max);
//					cd.setMinHR(min);
//					cd.setAverageHR(avg);
//					exGame.setCoolDownDuration(cd);
//					
//
//					
//					exGame.setScore(5+r.nextInt(25));
//					
//					sessions.add(exGame);
//					countGame++;
//				}
//				break;
//			case 3:
//				if(countActivity<activity+N){
//					
//					ActiveLifestylePASession pa=new ActiveLifestylePASession();
//					pa.setDate(actual);
//					cal.set(Calendar.HOUR_OF_DAY, r.nextInt(23));
//					cal.set(Calendar.MINUTE,r.nextInt(59));
//					String start=DateMgt.getReadableTime(cal);
//					pa.setStartTime(start);
//					int duration=20+r.nextInt(45);
//					cal.add(Calendar.MINUTE, duration);
//					String end=DateMgt.getReadableTime(cal);
//					pa.setEndTime(end);
//					pa.setDuration(duration);
//					
//					EnergyExpenditureObservation kcal=new EnergyExpenditureObservation();
//					kcal.setValue(350+r.nextInt(251));
//					pa.setEnergyExpenditure(kcal);
//					
//					pa.setType(ActivityType.values()[r.nextInt(3)]);
//					
//					pa.setMonitored(!(r.nextInt(4)==0));
//					if (pa.isMonitored()){
//						pa.setStepsNumber(6000+r.nextInt(4000));
//						pa.setAverageHeartRate(120);
//					}else{
//						pa.setIntensity(ActiveLifestylePAIntensityType.MODERATE);
//						pa.setDescription("in the park");
//					}
//					
//					pa.setIntensity(ActiveLifestylePAIntensityType.values()[r.nextInt(3)]);
//					
//					sessions.add(pa);
//					
//					countActivity++;
//				}
//				break;
//			default:
//				break;
//			}
//		}
//
//		cal.add(Calendar.DAY_OF_MONTH, -i);
//	}
//	
//	crs.setExerciseSession(sessions);
//	
//	return crs;
//}
	
}
