package it.eng.pathway.fake.model;

import java.util.Arrays;
import java.util.List;

import io.swagger.client.model.ExerClassSessionCoolDownInfohrRange;
import io.swagger.client.model.ExerClassSessionSubsection;
import io.swagger.client.model.ExerClassSessioncoolDownInfoSubSubsection;
import io.swagger.client.model.ExerClassSessionmainInfoSubSubsection;
import io.swagger.client.model.ExerClassSessionmainInfohrRange;
import io.swagger.client.model.ExerClassSessionwarmingUpInfoSubSubsection;
import io.swagger.client.model.ExerClassSessionwarmingUpInfohrRange;
import it.eng.pathway.utility.DateMgt;

public class ExerClassSession extends ExerciseSession {

	private StatusType status;

	private TrainingPhaseInfo warmingDuration;

//	private TrainingPhaseInfo stretchingDuration;

	private TrainingPhaseInfo mainDuration;

	private TrainingPhaseInfo coolDownDuration;

//	private TrainingPhaseInfo relaxationDuration;

	private SatisfactionLevelType sessionSatisfactionLevel;

	private List executedExercises;

	private StatusType statusType;

	private SatisfactionLevelType satisfactionLevelType;

	private HRZone hRZone;

	private ExerClassExercise[] exerClassExercise;

	private TrainingPhaseInfo trainingPhaseInfo;
	
	
	

	public ExerClassSession() {
		super();
	}
	
	public ExerClassSession (ExerClassSessionSubsection hdmsClassSession){ //per conservare l'ereditarietà 
		super();
		setDate(hdmsClassSession.getDate());
		setDuration(hdmsClassSession.getDuration());
//		setEndTime(hdmsClassSession.getCrProgressExerClassSessionEndTime());
		setEnergyExpenditure(new EnergyExpenditureObservation(hdmsClassSession.getEnergyExpenditure()));
//		setStartTime(hdmsClassSession.getCrProgressExerClassSessionStartTime());
		
		setStartTime(DateMgt.getReadableTime(hdmsClassSession.getStartTime()));
		setEndTime(DateMgt.getReadableTime(hdmsClassSession.getEndTime()));
		
		warmingDuration=new TrainingPhaseInfo();
		ExerClassSessionwarmingUpInfoSubSubsection wu=hdmsClassSession.getWarmingUpInfo();
		warmingDuration.setDuration(wu.getDuration());
		Integer val=wu.getAverageHRBpm()!=null ?  wu.getAverageHRBpm() : 0; //TODO issue to report
		warmingDuration.setAverageHR(val!=null ? val.floatValue() : 0);
		ExerClassSessionwarmingUpInfohrRange wuR = wu.getHrRange();
		warmingDuration.setMinHR(wuR.getMinimumHR());
		warmingDuration.setMaxHR(wuR.getMaximumHR());
		
		mainDuration=new TrainingPhaseInfo();
		ExerClassSessionmainInfoSubSubsection main=hdmsClassSession.getMainInfo();
		mainDuration.setDuration(main.getDuration());
		val=main.getAverageHRBpm();
		mainDuration.setAverageHR(val!=null ? val.floatValue() : 0);
		ExerClassSessionmainInfohrRange mainR = main.getHrRange();
		mainDuration.setMinHR(mainR.getMinimumHR());
		mainDuration.setMaxHR(mainR.getMaximumHR());
		
		coolDownDuration=new TrainingPhaseInfo();
		ExerClassSessioncoolDownInfoSubSubsection cd=hdmsClassSession.getCoolDownInfo();
		coolDownDuration.setDuration(cd.getDuration());
		val=cd.getAverageHRBpm();
		coolDownDuration.setAverageHR(val!=null ? val.floatValue() : 0);
		ExerClassSessionCoolDownInfohrRange cdR = cd.getHrRange();
		coolDownDuration.setMinHR(cdR.getMinimumHR());
		coolDownDuration.setMaxHR(cdR.getMaximumHR());
		
//		executedExercises=hdmsClassSession.getExerClassSessionExerClassExercisess(); //old version
//		executedExercises=hdmsClassSession.getExecutedExerClassSessionExercisess(); // richiede una nuova chiamata al server
		Integer pos;
		pos=hdmsClassSession.getStatus();
		if (pos!=null && pos<StatusType.values().length)
			status=StatusType.values()[pos]; //non è un'enumeration. Provo a prendere l'Integer che c'è e creando un array dalla nostra enumeration ne prend il valore
		
		pos=hdmsClassSession.getSessionSatisfactionLevel();
		if (pos!=null && pos<SatisfactionLevelType.values().length)
			sessionSatisfactionLevel=SatisfactionLevelType.values()[pos]; //stesso ragionamento
		
		setTrainingProfile(creteFakeTrainingProfile()); //TODO - questo dovrebbe essere compreso nel 
		
		this.setAcceptable(hdmsClassSession.getAcceptable()!=null && hdmsClassSession.getAcceptable()==1);
	}
	

	public StatusType getStatus() {
		return status;
	}

	public void setStatus(StatusType status) {
		this.status = status;
	}

	public TrainingPhaseInfo getWarmingDuration() {
		return warmingDuration;
	}

	public void setWarmingDuration(TrainingPhaseInfo warmingDuration) {
		this.warmingDuration = warmingDuration;
	}

	public TrainingPhaseInfo getMainDuration() {
		return mainDuration;
	}

	public void setMainDuration(TrainingPhaseInfo mainDuration) {
		this.mainDuration = mainDuration;
	}

	public TrainingPhaseInfo getCoolDownDuration() {
		return coolDownDuration;
	}

	public void setCoolDownDuration(TrainingPhaseInfo coolDownDuration) {
		this.coolDownDuration = coolDownDuration;
	}

	public SatisfactionLevelType getSessionSatisfactionLevel() {
		return sessionSatisfactionLevel;
	}

	public void setSessionSatisfactionLevel(SatisfactionLevelType sessionSatisfactionLevel) {
		this.sessionSatisfactionLevel = sessionSatisfactionLevel;
	}

	public List getExecutedExercises() {
		return executedExercises;
	}

	public void setExecutedExercises(List executedExercises) {
		this.executedExercises = executedExercises;
	}

	public StatusType getStatusType() {
		return statusType;
	}

	public void setStatusType(StatusType statusType) {
		this.statusType = statusType;
	}

	public SatisfactionLevelType getSatisfactionLevelType() {
		return satisfactionLevelType;
	}

	public void setSatisfactionLevelType(SatisfactionLevelType satisfactionLevelType) {
		this.satisfactionLevelType = satisfactionLevelType;
	}

	public HRZone gethRZone() {
		return hRZone;
	}

	public void sethRZone(HRZone hRZone) {
		this.hRZone = hRZone;
	}

	public ExerClassExercise[] getExerClassExercise() {
		return exerClassExercise;
	}

	public void setExerClassExercise(ExerClassExercise[] exerClassExercise) {
		this.exerClassExercise = exerClassExercise;
	}

	public TrainingPhaseInfo getTrainingPhaseInfo() {
		return trainingPhaseInfo;
	}

	public void setTrainingPhaseInfo(TrainingPhaseInfo trainingPhaseInfo) {
		this.trainingPhaseInfo = trainingPhaseInfo;
	}

	@Override
	public String toString() {
		return "ExerClassSession [status=" + status + ", warmingDuration=" + warmingDuration + ", mainDuration="
				+ mainDuration + ", coolDownDuration=" + coolDownDuration + ", sessionSatisfactionLevel="
				+ sessionSatisfactionLevel + ", executedExercises=" + executedExercises + ", statusType=" + statusType
				+ ", satisfactionLevelType=" + satisfactionLevelType + ", hRZone=" + hRZone + ", exerClassExercise="
				+ Arrays.toString(exerClassExercise) + ", trainingPhaseInfo=" + trainingPhaseInfo + ", getDuration()="
				+ getDuration() + ", getStartTime()=" + getStartTime() + ", getEndTime()=" + getEndTime() + "]";
	}


	public static TrainingProfile creteFakeTrainingProfile() {
		// TODO al momento manca il training profile agganciato alla sessione,
		// quindi me lo creo a mano
		TrainingProfile profile = new TrainingProfile();
		profile.setWarmingUpDuration(5);
		HRZone hrs = new HRZone();
		hrs.setMinimumHR(90);
		hrs.setMaximumHR(110);
		profile.setWuHR(hrs);

		profile.setMainDuration(35);
		hrs = new HRZone();
		hrs.setMinimumHR(120);
		hrs.setMaximumHR(180);
		profile.setAeHR(hrs);

		profile.setCooldownDuration(5);
		hrs = new HRZone();
		hrs.setMinimumHR(90);
		hrs.setMaximumHR(120);
		profile.setCdHR(hrs);

		return profile;
	}
	

}
